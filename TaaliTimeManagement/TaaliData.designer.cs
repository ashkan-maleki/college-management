#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaaliTimeManagement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TaaliTimeManagement")]
	public partial class TaaliDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertUniversityHoldingTime(UniversityHoldingTime instance);
    partial void UpdateUniversityHoldingTime(UniversityHoldingTime instance);
    partial void DeleteUniversityHoldingTime(UniversityHoldingTime instance);
    partial void InsertEmailAddress(EmailAddress instance);
    partial void UpdateEmailAddress(EmailAddress instance);
    partial void DeleteEmailAddress(EmailAddress instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupSubject(GroupSubject instance);
    partial void UpdateGroupSubject(GroupSubject instance);
    partial void DeleteGroupSubject(GroupSubject instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertMajorSubject(MajorSubject instance);
    partial void UpdateMajorSubject(MajorSubject instance);
    partial void DeleteMajorSubject(MajorSubject instance);
    partial void InsertMajorTeacher(MajorTeacher instance);
    partial void UpdateMajorTeacher(MajorTeacher instance);
    partial void DeleteMajorTeacher(MajorTeacher instance);
    partial void InsertPhoneNumber(PhoneNumber instance);
    partial void UpdatePhoneNumber(PhoneNumber instance);
    partial void DeletePhoneNumber(PhoneNumber instance);
    partial void InsertPrerequisite(Prerequisite instance);
    partial void UpdatePrerequisite(Prerequisite instance);
    partial void DeletePrerequisite(Prerequisite instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertSubjectTeacher(SubjectTeacher instance);
    partial void UpdateSubjectTeacher(SubjectTeacher instance);
    partial void DeleteSubjectTeacher(SubjectTeacher instance);
    partial void InsertSubjectType(SubjectType instance);
    partial void UpdateSubjectType(SubjectType instance);
    partial void DeleteSubjectType(SubjectType instance);
    partial void InsertTeacher(Teacher instance);
    partial void UpdateTeacher(Teacher instance);
    partial void DeleteTeacher(Teacher instance);
    partial void InsertTimeTable(TimeTable instance);
    partial void UpdateTimeTable(TimeTable instance);
    partial void DeleteTimeTable(TimeTable instance);
    partial void InsertTimeTeacher(TimeTeacher instance);
    partial void UpdateTimeTeacher(TimeTeacher instance);
    partial void DeleteTimeTeacher(TimeTeacher instance);
    #endregion
		
		public TaaliDataDataContext() : 
				base(global::TaaliTimeManagement.Properties.Settings.Default.TaaliTimeManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TaaliDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaaliDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaaliDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TaaliDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<UniversityHoldingTime> UniversityHoldingTimes
		{
			get
			{
				return this.GetTable<UniversityHoldingTime>();
			}
		}
		
		public System.Data.Linq.Table<EmailAddress> EmailAddresses
		{
			get
			{
				return this.GetTable<EmailAddress>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupSubject> GroupSubjects
		{
			get
			{
				return this.GetTable<GroupSubject>();
			}
		}
		
		public System.Data.Linq.Table<Major> Majors
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<MajorSubject> MajorSubjects
		{
			get
			{
				return this.GetTable<MajorSubject>();
			}
		}
		
		public System.Data.Linq.Table<MajorTeacher> MajorTeachers
		{
			get
			{
				return this.GetTable<MajorTeacher>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNumber> PhoneNumbers
		{
			get
			{
				return this.GetTable<PhoneNumber>();
			}
		}
		
		public System.Data.Linq.Table<Prerequisite> Prerequisites
		{
			get
			{
				return this.GetTable<Prerequisite>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<SubjectTeacher> SubjectTeachers
		{
			get
			{
				return this.GetTable<SubjectTeacher>();
			}
		}
		
		public System.Data.Linq.Table<SubjectType> SubjectTypes
		{
			get
			{
				return this.GetTable<SubjectType>();
			}
		}
		
		public System.Data.Linq.Table<Teacher> Teachers
		{
			get
			{
				return this.GetTable<Teacher>();
			}
		}
		
		public System.Data.Linq.Table<TimeTable> TimeTables
		{
			get
			{
				return this.GetTable<TimeTable>();
			}
		}
		
		public System.Data.Linq.Table<TimeTeacher> TimeTeachers
		{
			get
			{
				return this.GetTable<TimeTeacher>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassID;
		
		private int _Capacity;
		
		private System.Nullable<int> _BuildingFloor;
		
		private string _Department;
		
		private EntitySet<TimeTable> _TimeTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnBuildingFloorChanging(System.Nullable<int> value);
    partial void OnBuildingFloorChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    #endregion
		
		public Class()
		{
			this._TimeTables = new EntitySet<TimeTable>(new Action<TimeTable>(this.attach_TimeTables), new Action<TimeTable>(this.detach_TimeTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL")]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingFloor", DbType="Int")]
		public System.Nullable<int> BuildingFloor
		{
			get
			{
				return this._BuildingFloor;
			}
			set
			{
				if ((this._BuildingFloor != value))
				{
					this.OnBuildingFloorChanging(value);
					this.SendPropertyChanging();
					this._BuildingFloor = value;
					this.SendPropertyChanged("BuildingFloor");
					this.OnBuildingFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="NVarChar(50)")]
		public string Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TimeTable", Storage="_TimeTables", ThisKey="ClassID", OtherKey="ClassID")]
		public EntitySet<TimeTable> TimeTables
		{
			get
			{
				return this._TimeTables;
			}
			set
			{
				this._TimeTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeTables(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_TimeTables(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UniversityHoldingTime")]
	public partial class UniversityHoldingTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HoldingTimeID;
		
		private string _HoldingDay;
		
		private System.TimeSpan _StartTime;
		
		private System.TimeSpan _EndTime;
		
		private bool _Possible;
		
		private bool _Enabled;
		
		private EntitySet<TimeTeacher> _TimeTeachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHoldingTimeIDChanging(int value);
    partial void OnHoldingTimeIDChanged();
    partial void OnHoldingDayChanging(string value);
    partial void OnHoldingDayChanged();
    partial void OnStartTimeChanging(System.TimeSpan value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.TimeSpan value);
    partial void OnEndTimeChanged();
    partial void OnPossibleChanging(bool value);
    partial void OnPossibleChanged();
    partial void OnEnabledChanging(bool value);
    partial void OnEnabledChanged();
    #endregion
		
		public UniversityHoldingTime()
		{
			this._TimeTeachers = new EntitySet<TimeTeacher>(new Action<TimeTeacher>(this.attach_TimeTeachers), new Action<TimeTeacher>(this.detach_TimeTeachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldingTimeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HoldingTimeID
		{
			get
			{
				return this._HoldingTimeID;
			}
			set
			{
				if ((this._HoldingTimeID != value))
				{
					this.OnHoldingTimeIDChanging(value);
					this.SendPropertyChanging();
					this._HoldingTimeID = value;
					this.SendPropertyChanged("HoldingTimeID");
					this.OnHoldingTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoldingDay", DbType="NVarChar(9) NOT NULL", CanBeNull=false)]
		public string HoldingDay
		{
			get
			{
				return this._HoldingDay;
			}
			set
			{
				if ((this._HoldingDay != value))
				{
					this.OnHoldingDayChanging(value);
					this.SendPropertyChanging();
					this._HoldingDay = value;
					this.SendPropertyChanged("HoldingDay");
					this.OnHoldingDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time NOT NULL")]
		public System.TimeSpan StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Time NOT NULL")]
		public System.TimeSpan EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Possible", DbType="Bit NOT NULL")]
		public bool Possible
		{
			get
			{
				return this._Possible;
			}
			set
			{
				if ((this._Possible != value))
				{
					this.OnPossibleChanging(value);
					this.SendPropertyChanging();
					this._Possible = value;
					this.SendPropertyChanged("Possible");
					this.OnPossibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enabled", DbType="Bit NOT NULL")]
		public bool Enabled
		{
			get
			{
				return this._Enabled;
			}
			set
			{
				if ((this._Enabled != value))
				{
					this.OnEnabledChanging(value);
					this.SendPropertyChanging();
					this._Enabled = value;
					this.SendPropertyChanged("Enabled");
					this.OnEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UniversityHoldingTime_TimeTeacher", Storage="_TimeTeachers", ThisKey="HoldingTimeID", OtherKey="TimeID")]
		public EntitySet<TimeTeacher> TimeTeachers
		{
			get
			{
				return this._TimeTeachers;
			}
			set
			{
				this._TimeTeachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeTeachers(TimeTeacher entity)
		{
			this.SendPropertyChanging();
			entity.UniversityHoldingTime = this;
		}
		
		private void detach_TimeTeachers(TimeTeacher entity)
		{
			this.SendPropertyChanging();
			entity.UniversityHoldingTime = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailAddress")]
	public partial class EmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TeacherID;
		
		private string _EmailAddress1;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnEmailAddress1Changing(string value);
    partial void OnEmailAddress1Changed();
    #endregion
		
		public EmailAddress()
		{
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EmailAddress", Storage="_EmailAddress1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string EmailAddress1
		{
			get
			{
				return this._EmailAddress1;
			}
			set
			{
				if ((this._EmailAddress1 != value))
				{
					this.OnEmailAddress1Changing(value);
					this.SendPropertyChanging();
					this._EmailAddress1 = value;
					this.SendPropertyChanged("EmailAddress1");
					this.OnEmailAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_EmailAddress", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.EmailAddresses.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.EmailAddresses.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private int _MajorID;
		
		private int _EnterYear;
		
		private byte _EnterSemester;
		
		private System.Nullable<byte> _NumberOfStudent;
		
		private string _Title;
		
		private EntitySet<GroupSubject> _GroupSubjects;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnEnterYearChanging(int value);
    partial void OnEnterYearChanged();
    partial void OnEnterSemesterChanging(byte value);
    partial void OnEnterSemesterChanged();
    partial void OnNumberOfStudentChanging(System.Nullable<byte> value);
    partial void OnNumberOfStudentChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Group()
		{
			this._GroupSubjects = new EntitySet<GroupSubject>(new Action<GroupSubject>(this.attach_GroupSubjects), new Action<GroupSubject>(this.detach_GroupSubjects));
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", DbType="Int NOT NULL")]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterYear", DbType="Int NOT NULL")]
		public int EnterYear
		{
			get
			{
				return this._EnterYear;
			}
			set
			{
				if ((this._EnterYear != value))
				{
					this.OnEnterYearChanging(value);
					this.SendPropertyChanging();
					this._EnterYear = value;
					this.SendPropertyChanged("EnterYear");
					this.OnEnterYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterSemester", DbType="TinyInt NOT NULL")]
		public byte EnterSemester
		{
			get
			{
				return this._EnterSemester;
			}
			set
			{
				if ((this._EnterSemester != value))
				{
					this.OnEnterSemesterChanging(value);
					this.SendPropertyChanging();
					this._EnterSemester = value;
					this.SendPropertyChanged("EnterSemester");
					this.OnEnterSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfStudent", DbType="TinyInt")]
		public System.Nullable<byte> NumberOfStudent
		{
			get
			{
				return this._NumberOfStudent;
			}
			set
			{
				if ((this._NumberOfStudent != value))
				{
					this.OnNumberOfStudentChanging(value);
					this.SendPropertyChanging();
					this._NumberOfStudent = value;
					this.SendPropertyChanged("NumberOfStudent");
					this.OnNumberOfStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupSubject", Storage="_GroupSubjects", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<GroupSubject> GroupSubjects
		{
			get
			{
				return this._GroupSubjects;
			}
			set
			{
				this._GroupSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Group", Storage="_Major", ThisKey="MajorID", OtherKey="MajorID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._MajorID = value.MajorID;
					}
					else
					{
						this._MajorID = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupSubjects(GroupSubject entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupSubjects(GroupSubject entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupSubject")]
	public partial class GroupSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupSubjectID;
		
		private int _GroupID;
		
		private int _SubjectID;
		
		private byte _TermYear;
		
		private byte _Semester;
		
		private EntitySet<TimeTable> _TimeTables;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupSubjectIDChanging(int value);
    partial void OnGroupSubjectIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnTermYearChanging(byte value);
    partial void OnTermYearChanged();
    partial void OnSemesterChanging(byte value);
    partial void OnSemesterChanged();
    #endregion
		
		public GroupSubject()
		{
			this._TimeTables = new EntitySet<TimeTable>(new Action<TimeTable>(this.attach_TimeTables), new Action<TimeTable>(this.detach_TimeTables));
			this._Group = default(EntityRef<Group>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupSubjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupSubjectID
		{
			get
			{
				return this._GroupSubjectID;
			}
			set
			{
				if ((this._GroupSubjectID != value))
				{
					this.OnGroupSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupSubjectID = value;
					this.SendPropertyChanged("GroupSubjectID");
					this.OnGroupSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermYear", DbType="TinyInt NOT NULL")]
		public byte TermYear
		{
			get
			{
				return this._TermYear;
			}
			set
			{
				if ((this._TermYear != value))
				{
					this.OnTermYearChanging(value);
					this.SendPropertyChanging();
					this._TermYear = value;
					this.SendPropertyChanged("TermYear");
					this.OnTermYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Semester", DbType="TinyInt NOT NULL")]
		public byte Semester
		{
			get
			{
				return this._Semester;
			}
			set
			{
				if ((this._Semester != value))
				{
					this.OnSemesterChanging(value);
					this.SendPropertyChanging();
					this._Semester = value;
					this.SendPropertyChanged("Semester");
					this.OnSemesterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupSubject_TimeTable", Storage="_TimeTables", ThisKey="GroupSubjectID", OtherKey="GroupSubjectID")]
		public EntitySet<TimeTable> TimeTables
		{
			get
			{
				return this._TimeTables;
			}
			set
			{
				this._TimeTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupSubject", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupSubjects.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupSubjects.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_GroupSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.GroupSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.GroupSubjects.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeTables(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.GroupSubject = this;
		}
		
		private void detach_TimeTables(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.GroupSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MajorID;
		
		private string _MajorLevel;
		
		private string _Title;
		
		private string _Branch;
		
		private EntitySet<Group> _Groups;
		
		private EntitySet<MajorSubject> _MajorSubjects;
		
		private EntitySet<MajorTeacher> _MajorTeachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnMajorLevelChanging(string value);
    partial void OnMajorLevelChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBranchChanging(string value);
    partial void OnBranchChanged();
    #endregion
		
		public Major()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			this._MajorSubjects = new EntitySet<MajorSubject>(new Action<MajorSubject>(this.attach_MajorSubjects), new Action<MajorSubject>(this.detach_MajorSubjects));
			this._MajorTeachers = new EntitySet<MajorTeacher>(new Action<MajorTeacher>(this.attach_MajorTeachers), new Action<MajorTeacher>(this.detach_MajorTeachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorLevel", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MajorLevel
		{
			get
			{
				return this._MajorLevel;
			}
			set
			{
				if ((this._MajorLevel != value))
				{
					this.OnMajorLevelChanging(value);
					this.SendPropertyChanging();
					this._MajorLevel = value;
					this.SendPropertyChanged("MajorLevel");
					this.OnMajorLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch", DbType="NVarChar(50)")]
		public string Branch
		{
			get
			{
				return this._Branch;
			}
			set
			{
				if ((this._Branch != value))
				{
					this.OnBranchChanging(value);
					this.SendPropertyChanging();
					this._Branch = value;
					this.SendPropertyChanged("Branch");
					this.OnBranchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_Group", Storage="_Groups", ThisKey="MajorID", OtherKey="MajorID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_MajorSubject", Storage="_MajorSubjects", ThisKey="MajorID", OtherKey="MajorID")]
		public EntitySet<MajorSubject> MajorSubjects
		{
			get
			{
				return this._MajorSubjects;
			}
			set
			{
				this._MajorSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_MajorTeacher", Storage="_MajorTeachers", ThisKey="MajorID", OtherKey="MajorID")]
		public EntitySet<MajorTeacher> MajorTeachers
		{
			get
			{
				return this._MajorTeachers;
			}
			set
			{
				this._MajorTeachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_MajorSubjects(MajorSubject entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_MajorSubjects(MajorSubject entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_MajorTeachers(MajorTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_MajorTeachers(MajorTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MajorSubject")]
	public partial class MajorSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MajorID;
		
		private int _SubjectID;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<Subject> _Subject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    #endregion
		
		public MajorSubject()
		{
			this._Major = default(EntityRef<Major>);
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", DbType="Int NOT NULL")]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_MajorSubject", Storage="_Major", ThisKey="MajorID", OtherKey="MajorID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.MajorSubjects.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.MajorSubjects.Add(this);
						this._MajorID = value.MajorID;
					}
					else
					{
						this._MajorID = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_MajorSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.MajorSubjects.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.MajorSubjects.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MajorTeacher")]
	public partial class MajorTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MajorID;
		
		private int _TeacherID;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMajorIDChanging(int value);
    partial void OnMajorIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    #endregion
		
		public MajorTeacher()
		{
			this._Major = default(EntityRef<Major>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorID", DbType="Int NOT NULL")]
		public int MajorID
		{
			get
			{
				return this._MajorID;
			}
			set
			{
				if ((this._MajorID != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorIDChanging(value);
					this.SendPropertyChanging();
					this._MajorID = value;
					this.SendPropertyChanged("MajorID");
					this.OnMajorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_MajorTeacher", Storage="_Major", ThisKey="MajorID", OtherKey="MajorID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.MajorTeachers.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.MajorTeachers.Add(this);
						this._MajorID = value.MajorID;
					}
					else
					{
						this._MajorID = default(int);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_MajorTeacher", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.MajorTeachers.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.MajorTeachers.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneNumber")]
	public partial class PhoneNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _TeacherID;
		
		private string _PhoneNumber1;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnPhoneNumber1Changing(string value);
    partial void OnPhoneNumber1Changed();
    #endregion
		
		public PhoneNumber()
		{
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PhoneNumber", Storage="_PhoneNumber1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber1
		{
			get
			{
				return this._PhoneNumber1;
			}
			set
			{
				if ((this._PhoneNumber1 != value))
				{
					this.OnPhoneNumber1Changing(value);
					this.SendPropertyChanging();
					this._PhoneNumber1 = value;
					this.SendPropertyChanged("PhoneNumber1");
					this.OnPhoneNumber1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_PhoneNumber", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.PhoneNumbers.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.PhoneNumbers.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prerequisite")]
	public partial class Prerequisite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrerequisiteID;
		
		private int _SubjectID;
		
		private int _PrerequisiteSubjectID;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Subject> _Subject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrerequisiteIDChanging(int value);
    partial void OnPrerequisiteIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnPrerequisiteSubjectIDChanging(int value);
    partial void OnPrerequisiteSubjectIDChanged();
    #endregion
		
		public Prerequisite()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Subject1 = default(EntityRef<Subject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrerequisiteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrerequisiteID
		{
			get
			{
				return this._PrerequisiteID;
			}
			set
			{
				if ((this._PrerequisiteID != value))
				{
					this.OnPrerequisiteIDChanging(value);
					this.SendPropertyChanging();
					this._PrerequisiteID = value;
					this.SendPropertyChanged("PrerequisiteID");
					this.OnPrerequisiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrerequisiteSubjectID", DbType="Int NOT NULL")]
		public int PrerequisiteSubjectID
		{
			get
			{
				return this._PrerequisiteSubjectID;
			}
			set
			{
				if ((this._PrerequisiteSubjectID != value))
				{
					if (this._Subject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrerequisiteSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._PrerequisiteSubjectID = value;
					this.SendPropertyChanged("PrerequisiteSubjectID");
					this.OnPrerequisiteSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Prerequisite", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Prerequisites.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Prerequisites.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Prerequisite1", Storage="_Subject1", ThisKey="PrerequisiteSubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject1
		{
			get
			{
				return this._Subject1.Entity;
			}
			set
			{
				Subject previousValue = this._Subject1.Entity;
				if (((previousValue != value) 
							|| (this._Subject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject1.Entity = null;
						previousValue.Prerequisites1.Remove(this);
					}
					this._Subject1.Entity = value;
					if ((value != null))
					{
						value.Prerequisites1.Add(this);
						this._PrerequisiteSubjectID = value.SubjectID;
					}
					else
					{
						this._PrerequisiteSubjectID = default(int);
					}
					this.SendPropertyChanged("Subject1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectID;
		
		private string _Title;
		
		private byte _Units;
		
		private int _SubjectTypeID;
		
		private EntitySet<GroupSubject> _GroupSubjects;
		
		private EntitySet<MajorSubject> _MajorSubjects;
		
		private EntitySet<Prerequisite> _Prerequisites;
		
		private EntitySet<Prerequisite> _Prerequisites1;
		
		private EntitySet<SubjectTeacher> _SubjectTeachers;
		
		private EntityRef<SubjectType> _SubjectType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnUnitsChanging(byte value);
    partial void OnUnitsChanged();
    partial void OnSubjectTypeIDChanging(int value);
    partial void OnSubjectTypeIDChanged();
    #endregion
		
		public Subject()
		{
			this._GroupSubjects = new EntitySet<GroupSubject>(new Action<GroupSubject>(this.attach_GroupSubjects), new Action<GroupSubject>(this.detach_GroupSubjects));
			this._MajorSubjects = new EntitySet<MajorSubject>(new Action<MajorSubject>(this.attach_MajorSubjects), new Action<MajorSubject>(this.detach_MajorSubjects));
			this._Prerequisites = new EntitySet<Prerequisite>(new Action<Prerequisite>(this.attach_Prerequisites), new Action<Prerequisite>(this.detach_Prerequisites));
			this._Prerequisites1 = new EntitySet<Prerequisite>(new Action<Prerequisite>(this.attach_Prerequisites1), new Action<Prerequisite>(this.detach_Prerequisites1));
			this._SubjectTeachers = new EntitySet<SubjectTeacher>(new Action<SubjectTeacher>(this.attach_SubjectTeachers), new Action<SubjectTeacher>(this.detach_SubjectTeachers));
			this._SubjectType = default(EntityRef<SubjectType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="TinyInt NOT NULL")]
		public byte Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTypeID", DbType="Int NOT NULL")]
		public int SubjectTypeID
		{
			get
			{
				return this._SubjectTypeID;
			}
			set
			{
				if ((this._SubjectTypeID != value))
				{
					if (this._SubjectType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectTypeID = value;
					this.SendPropertyChanged("SubjectTypeID");
					this.OnSubjectTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_GroupSubject", Storage="_GroupSubjects", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<GroupSubject> GroupSubjects
		{
			get
			{
				return this._GroupSubjects;
			}
			set
			{
				this._GroupSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_MajorSubject", Storage="_MajorSubjects", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<MajorSubject> MajorSubjects
		{
			get
			{
				return this._MajorSubjects;
			}
			set
			{
				this._MajorSubjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Prerequisite", Storage="_Prerequisites", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<Prerequisite> Prerequisites
		{
			get
			{
				return this._Prerequisites;
			}
			set
			{
				this._Prerequisites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Prerequisite1", Storage="_Prerequisites1", ThisKey="SubjectID", OtherKey="PrerequisiteSubjectID")]
		public EntitySet<Prerequisite> Prerequisites1
		{
			get
			{
				return this._Prerequisites1;
			}
			set
			{
				this._Prerequisites1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectTeacher", Storage="_SubjectTeachers", ThisKey="SubjectID", OtherKey="SubjectID")]
		public EntitySet<SubjectTeacher> SubjectTeachers
		{
			get
			{
				return this._SubjectTeachers;
			}
			set
			{
				this._SubjectTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubjectType_Subject", Storage="_SubjectType", ThisKey="SubjectTypeID", OtherKey="SubjectTypeID", IsForeignKey=true)]
		public SubjectType SubjectType
		{
			get
			{
				return this._SubjectType.Entity;
			}
			set
			{
				SubjectType previousValue = this._SubjectType.Entity;
				if (((previousValue != value) 
							|| (this._SubjectType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubjectType.Entity = null;
						previousValue.Subjects.Remove(this);
					}
					this._SubjectType.Entity = value;
					if ((value != null))
					{
						value.Subjects.Add(this);
						this._SubjectTypeID = value.SubjectTypeID;
					}
					else
					{
						this._SubjectTypeID = default(int);
					}
					this.SendPropertyChanged("SubjectType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupSubjects(GroupSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_GroupSubjects(GroupSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_MajorSubjects(MajorSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_MajorSubjects(MajorSubject entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Prerequisites(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Prerequisites(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Prerequisites1(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = this;
		}
		
		private void detach_Prerequisites1(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Subject1 = null;
		}
		
		private void attach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectTeacher")]
	public partial class SubjectTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _SubjectID;
		
		private int _TeacherID;
		
		private bool _Active;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<Teacher> _Teacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public SubjectTeacher()
		{
			this._Subject = default(EntityRef<Subject>);
			this._Teacher = default(EntityRef<Teacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
		public int SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_SubjectTeacher", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.SubjectTeachers.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.SubjectTeachers.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(int);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_SubjectTeacher", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.SubjectTeachers.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.SubjectTeachers.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubjectType")]
	public partial class SubjectType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubjectTypeID;
		
		private string _TypeTitle;
		
		private bool _Theory;
		
		private int _PricePerUnit;
		
		private int _SalaryPerUnit;
		
		private byte _HoursPerUnit;
		
		private EntitySet<Subject> _Subjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectTypeIDChanging(int value);
    partial void OnSubjectTypeIDChanged();
    partial void OnTypeTitleChanging(string value);
    partial void OnTypeTitleChanged();
    partial void OnTheoryChanging(bool value);
    partial void OnTheoryChanged();
    partial void OnPricePerUnitChanging(int value);
    partial void OnPricePerUnitChanged();
    partial void OnSalaryPerUnitChanging(int value);
    partial void OnSalaryPerUnitChanged();
    partial void OnHoursPerUnitChanging(byte value);
    partial void OnHoursPerUnitChanged();
    #endregion
		
		public SubjectType()
		{
			this._Subjects = new EntitySet<Subject>(new Action<Subject>(this.attach_Subjects), new Action<Subject>(this.detach_Subjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubjectTypeID
		{
			get
			{
				return this._SubjectTypeID;
			}
			set
			{
				if ((this._SubjectTypeID != value))
				{
					this.OnSubjectTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectTypeID = value;
					this.SendPropertyChanged("SubjectTypeID");
					this.OnSubjectTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeTitle
		{
			get
			{
				return this._TypeTitle;
			}
			set
			{
				if ((this._TypeTitle != value))
				{
					this.OnTypeTitleChanging(value);
					this.SendPropertyChanging();
					this._TypeTitle = value;
					this.SendPropertyChanged("TypeTitle");
					this.OnTypeTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theory", DbType="Bit NOT NULL")]
		public bool Theory
		{
			get
			{
				return this._Theory;
			}
			set
			{
				if ((this._Theory != value))
				{
					this.OnTheoryChanging(value);
					this.SendPropertyChanging();
					this._Theory = value;
					this.SendPropertyChanged("Theory");
					this.OnTheoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerUnit", DbType="Int NOT NULL")]
		public int PricePerUnit
		{
			get
			{
				return this._PricePerUnit;
			}
			set
			{
				if ((this._PricePerUnit != value))
				{
					this.OnPricePerUnitChanging(value);
					this.SendPropertyChanging();
					this._PricePerUnit = value;
					this.SendPropertyChanged("PricePerUnit");
					this.OnPricePerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryPerUnit", DbType="Int NOT NULL")]
		public int SalaryPerUnit
		{
			get
			{
				return this._SalaryPerUnit;
			}
			set
			{
				if ((this._SalaryPerUnit != value))
				{
					this.OnSalaryPerUnitChanging(value);
					this.SendPropertyChanging();
					this._SalaryPerUnit = value;
					this.SendPropertyChanged("SalaryPerUnit");
					this.OnSalaryPerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoursPerUnit", DbType="TinyInt NOT NULL")]
		public byte HoursPerUnit
		{
			get
			{
				return this._HoursPerUnit;
			}
			set
			{
				if ((this._HoursPerUnit != value))
				{
					this.OnHoursPerUnitChanging(value);
					this.SendPropertyChanging();
					this._HoursPerUnit = value;
					this.SendPropertyChanged("HoursPerUnit");
					this.OnHoursPerUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubjectType_Subject", Storage="_Subjects", ThisKey="SubjectTypeID", OtherKey="SubjectTypeID")]
		public EntitySet<Subject> Subjects
		{
			get
			{
				return this._Subjects;
			}
			set
			{
				this._Subjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.SubjectType = this;
		}
		
		private void detach_Subjects(Subject entity)
		{
			this.SendPropertyChanging();
			entity.SubjectType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teacher")]
	public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeacherID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<EmailAddress> _EmailAddresses;
		
		private EntitySet<MajorTeacher> _MajorTeachers;
		
		private EntitySet<PhoneNumber> _PhoneNumbers;
		
		private EntitySet<SubjectTeacher> _SubjectTeachers;
		
		private EntitySet<TimeTeacher> _TimeTeachers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Teacher()
		{
			this._EmailAddresses = new EntitySet<EmailAddress>(new Action<EmailAddress>(this.attach_EmailAddresses), new Action<EmailAddress>(this.detach_EmailAddresses));
			this._MajorTeachers = new EntitySet<MajorTeacher>(new Action<MajorTeacher>(this.attach_MajorTeachers), new Action<MajorTeacher>(this.detach_MajorTeachers));
			this._PhoneNumbers = new EntitySet<PhoneNumber>(new Action<PhoneNumber>(this.attach_PhoneNumbers), new Action<PhoneNumber>(this.detach_PhoneNumbers));
			this._SubjectTeachers = new EntitySet<SubjectTeacher>(new Action<SubjectTeacher>(this.attach_SubjectTeachers), new Action<SubjectTeacher>(this.detach_SubjectTeachers));
			this._TimeTeachers = new EntitySet<TimeTeacher>(new Action<TimeTeacher>(this.attach_TimeTeachers), new Action<TimeTeacher>(this.detach_TimeTeachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_EmailAddress", Storage="_EmailAddresses", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<EmailAddress> EmailAddresses
		{
			get
			{
				return this._EmailAddresses;
			}
			set
			{
				this._EmailAddresses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_MajorTeacher", Storage="_MajorTeachers", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<MajorTeacher> MajorTeachers
		{
			get
			{
				return this._MajorTeachers;
			}
			set
			{
				this._MajorTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_PhoneNumber", Storage="_PhoneNumbers", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<PhoneNumber> PhoneNumbers
		{
			get
			{
				return this._PhoneNumbers;
			}
			set
			{
				this._PhoneNumbers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_SubjectTeacher", Storage="_SubjectTeachers", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<SubjectTeacher> SubjectTeachers
		{
			get
			{
				return this._SubjectTeachers;
			}
			set
			{
				this._SubjectTeachers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TimeTeacher", Storage="_TimeTeachers", ThisKey="TeacherID", OtherKey="TeacherID")]
		public EntitySet<TimeTeacher> TimeTeachers
		{
			get
			{
				return this._TimeTeachers;
			}
			set
			{
				this._TimeTeachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmailAddresses(EmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_EmailAddresses(EmailAddress entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_MajorTeachers(MajorTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_MajorTeachers(MajorTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_PhoneNumbers(PhoneNumber entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_PhoneNumbers(PhoneNumber entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_SubjectTeachers(SubjectTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
		
		private void attach_TimeTeachers(TimeTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = this;
		}
		
		private void detach_TimeTeachers(TimeTeacher entity)
		{
			this.SendPropertyChanging();
			entity.Teacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeTable")]
	public partial class TimeTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ClassID;
		
		private int _TimeTeacherID;
		
		private int _GroupSubjectID;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<GroupSubject> _GroupSubject;
		
		private EntityRef<TimeTeacher> _TimeTeacher;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnTimeTeacherIDChanging(int value);
    partial void OnTimeTeacherIDChanged();
    partial void OnGroupSubjectIDChanging(int value);
    partial void OnGroupSubjectIDChanged();
    #endregion
		
		public TimeTable()
		{
			this._Class = default(EntityRef<Class>);
			this._GroupSubject = default(EntityRef<GroupSubject>);
			this._TimeTeacher = default(EntityRef<TimeTeacher>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeTeacherID", DbType="Int NOT NULL")]
		public int TimeTeacherID
		{
			get
			{
				return this._TimeTeacherID;
			}
			set
			{
				if ((this._TimeTeacherID != value))
				{
					if (this._TimeTeacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TimeTeacherID = value;
					this.SendPropertyChanged("TimeTeacherID");
					this.OnTimeTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupSubjectID", DbType="Int NOT NULL")]
		public int GroupSubjectID
		{
			get
			{
				return this._GroupSubjectID;
			}
			set
			{
				if ((this._GroupSubjectID != value))
				{
					if (this._GroupSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._GroupSubjectID = value;
					this.SendPropertyChanged("GroupSubjectID");
					this.OnGroupSubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TimeTable", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.TimeTables.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.TimeTables.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupSubject_TimeTable", Storage="_GroupSubject", ThisKey="GroupSubjectID", OtherKey="GroupSubjectID", IsForeignKey=true)]
		public GroupSubject GroupSubject
		{
			get
			{
				return this._GroupSubject.Entity;
			}
			set
			{
				GroupSubject previousValue = this._GroupSubject.Entity;
				if (((previousValue != value) 
							|| (this._GroupSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupSubject.Entity = null;
						previousValue.TimeTables.Remove(this);
					}
					this._GroupSubject.Entity = value;
					if ((value != null))
					{
						value.TimeTables.Add(this);
						this._GroupSubjectID = value.GroupSubjectID;
					}
					else
					{
						this._GroupSubjectID = default(int);
					}
					this.SendPropertyChanged("GroupSubject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeTeacher_TimeTable", Storage="_TimeTeacher", ThisKey="TimeTeacherID", OtherKey="TimeTeacherID", IsForeignKey=true)]
		public TimeTeacher TimeTeacher
		{
			get
			{
				return this._TimeTeacher.Entity;
			}
			set
			{
				TimeTeacher previousValue = this._TimeTeacher.Entity;
				if (((previousValue != value) 
							|| (this._TimeTeacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeTeacher.Entity = null;
						previousValue.TimeTables.Remove(this);
					}
					this._TimeTeacher.Entity = value;
					if ((value != null))
					{
						value.TimeTables.Add(this);
						this._TimeTeacherID = value.TimeTeacherID;
					}
					else
					{
						this._TimeTeacherID = default(int);
					}
					this.SendPropertyChanged("TimeTeacher");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeTeacher")]
	public partial class TimeTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TimeTeacherID;
		
		private int _TimeID;
		
		private int _TeacherID;
		
		private bool _Active;
		
		private EntitySet<TimeTable> _TimeTables;
		
		private EntityRef<Teacher> _Teacher;
		
		private EntityRef<UniversityHoldingTime> _UniversityHoldingTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeTeacherIDChanging(int value);
    partial void OnTimeTeacherIDChanged();
    partial void OnTimeIDChanging(int value);
    partial void OnTimeIDChanged();
    partial void OnTeacherIDChanging(int value);
    partial void OnTeacherIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public TimeTeacher()
		{
			this._TimeTables = new EntitySet<TimeTable>(new Action<TimeTable>(this.attach_TimeTables), new Action<TimeTable>(this.detach_TimeTables));
			this._Teacher = default(EntityRef<Teacher>);
			this._UniversityHoldingTime = default(EntityRef<UniversityHoldingTime>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeTeacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TimeTeacherID
		{
			get
			{
				return this._TimeTeacherID;
			}
			set
			{
				if ((this._TimeTeacherID != value))
				{
					this.OnTimeTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TimeTeacherID = value;
					this.SendPropertyChanged("TimeTeacherID");
					this.OnTimeTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeID", DbType="Int NOT NULL")]
		public int TimeID
		{
			get
			{
				return this._TimeID;
			}
			set
			{
				if ((this._TimeID != value))
				{
					if (this._UniversityHoldingTime.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeIDChanging(value);
					this.SendPropertyChanging();
					this._TimeID = value;
					this.SendPropertyChanged("TimeID");
					this.OnTimeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int NOT NULL")]
		public int TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Teacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeTeacher_TimeTable", Storage="_TimeTables", ThisKey="TimeTeacherID", OtherKey="TimeTeacherID")]
		public EntitySet<TimeTable> TimeTables
		{
			get
			{
				return this._TimeTables;
			}
			set
			{
				this._TimeTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TimeTeacher", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
		public Teacher Teacher
		{
			get
			{
				return this._Teacher.Entity;
			}
			set
			{
				Teacher previousValue = this._Teacher.Entity;
				if (((previousValue != value) 
							|| (this._Teacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teacher.Entity = null;
						previousValue.TimeTeachers.Remove(this);
					}
					this._Teacher.Entity = value;
					if ((value != null))
					{
						value.TimeTeachers.Add(this);
						this._TeacherID = value.TeacherID;
					}
					else
					{
						this._TeacherID = default(int);
					}
					this.SendPropertyChanged("Teacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UniversityHoldingTime_TimeTeacher", Storage="_UniversityHoldingTime", ThisKey="TimeID", OtherKey="HoldingTimeID", IsForeignKey=true)]
		public UniversityHoldingTime UniversityHoldingTime
		{
			get
			{
				return this._UniversityHoldingTime.Entity;
			}
			set
			{
				UniversityHoldingTime previousValue = this._UniversityHoldingTime.Entity;
				if (((previousValue != value) 
							|| (this._UniversityHoldingTime.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UniversityHoldingTime.Entity = null;
						previousValue.TimeTeachers.Remove(this);
					}
					this._UniversityHoldingTime.Entity = value;
					if ((value != null))
					{
						value.TimeTeachers.Add(this);
						this._TimeID = value.HoldingTimeID;
					}
					else
					{
						this._TimeID = default(int);
					}
					this.SendPropertyChanged("UniversityHoldingTime");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TimeTables(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.TimeTeacher = this;
		}
		
		private void detach_TimeTables(TimeTable entity)
		{
			this.SendPropertyChanging();
			entity.TimeTeacher = null;
		}
	}
}
#pragma warning restore 1591
